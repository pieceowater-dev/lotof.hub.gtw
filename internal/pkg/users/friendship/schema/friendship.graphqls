type Friendship {
    id: ID!
    userId: ID!
    friendId: ID!
    status: FriendshipStatus!
}

input FriendshipFilter {
    userId: ID!
    status: FriendshipStatus
}

enum FriendshipStatus {
    PENDING
    ACCEPTED
    REJECTED
}

type PaginatedFriendshipList {
    rows: [Friendship!]!
    info: PaginationInfo!
}

input CreateFriendshipInput {
    userId: ID! #todo: dont forget to verify userId with user auth token
    friendId: ID!
}

input AcceptFriendshipInput {
    friendshipId: ID!
}

input RemoveFriendshipInput {
    friendshipId: ID!
}

extend type Query{
    friendshipList(filter: FriendshipFilter): PaginatedFriendshipList!
}

# Friendship Mutations
extend type Mutation {
    createFriendship(input: CreateFriendshipInput!): Friendship!
    acceptFriendshipRequest(input: AcceptFriendshipInput!): Friendship! #makes FriendshipStatus eq ACCEPTED, only user that's eq friendId
    removeFriendship(input: RemoveFriendshipInput!): Boolean! #soft deletes Friendship
}